// Define variables
def scmVars

// Start Pipeline
pipeline {

  // Configure Jenkins Slave
  agent {
    // Use Kubernetes as dynamic Jenkins Slave
    kubernetes {
      // Kubernetes Manifest File to spin up Pod to do build
      yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: skan
    image: alcide/skan:v0.9.0-debug
    command:
    - cat
    tty: true
  - name: docker
    image: docker:19.03.13-dind
    command:
    - dockerd
    - --host=unix:///var/run/docker.sock
    - --host=tcp://0.0.0.0:2375
    - --storage-driver=overlay2
    tty: true
    securityContext:
      privileged: true
  - name: helm
    image: lachlanevenson/k8s-helm:v3.3.4
    command:
    - cat
    tty: true
  - name: java-node
    image: timbru31/java-node:11-alpine-jre
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /home/jenkins/dependency-check-data
      name: dependency-check-data
  volumes:
  - name: dependency-check-data
    hostPath:
      path: /tmp/dependency-check-data
"""
    } // End kubernetes
  } // End agent

  // Define Environment Variables
  environment {
    ENV_NAME = "${BRANCH_NAME == "master" ? "uat" : "${BRANCH_NAME}"}"
    SCANNER_HOME = tool 'sonarqube-scanner'
    PROJECT_KEY = "training10-bookinfo-details"
    PROJECT_NAME = "training10-bookinfo-details"
  }

  // Start Pipeline
  stages {

    // ***** Stage Clone *****
    stage('Clone details source code') {
      // Steps to run build
      steps {
        // Run in Jenkins Slave container
        container('jnlp') {
          // Use script to run
          script {
            // Git clone repo and checkout branch as we put in parameter
            scmVars = git branch: "${BRANCH_NAME}",
                          credentialsId: 'training10-bookinfo-git-deploy-key',
                          url: 'git@git.demo.opsta.co.th:adb/training10/details.git'
          } // End script
        } // End container
      } // End steps
    } // End stage

    // ***** Stage sKan *****
    stage('sKan') {
      steps {
        container('helm') {
          script {
            // Generate k8s-manifest-deploy.yaml for scanning
            sh "helm template -f k8s/helm-values/values-bookinfo-${ENV_NAME}-details.yaml \
                --set extraEnv.COMMIT_ID=${scmVars.GIT_COMMIT} \
                --namespace training39-bookinfo-${ENV_NAME} bookinfo-${ENV_NAME}-details k8s/helm \
                > k8s-manifest-deploy.yaml"
          } // End script
        } // End container
        container('skan') {
          script {
            // Scanning with sKan
            sh "/skan manifest -f k8s-manifest-deploy.yaml"
            // Keep report as artifacts
            archiveArtifacts artifacts: 'skan-result.html'
            sh "rm k8s-manifest-deploy.yaml"
          } // End script
        } // End container
      } // End steps
    } // End stage

    // ***** Stage OWASP *****
    stage('OWASP Dependency Check') {
      steps {
        container('java-node') {
          script {
            // Install application dependency
            sh '''cd src/ && npm install --package-lock && cd ../'''
            // Start OWASP Dependency Check
            dependencyCheck(
              additionalArguments: "--data /home/jenkins/dependency-check-data --out dependency-check-report.xml",
              odcInstallation: "dependency-check"
            )
            // Publish report to Jenkins
            dependencyCheckPublisher(
              pattern: 'dependency-check-report.xml'
            )
            // Remove application dependency
            sh '''rm -rf src/node_modules src/package-lock.json'''
          } // End script
        } // End container
      } // End steps
    } // End stage


    // ***** Stage Sonarqube *****
    stage('Sonarqube Scanner') {
      steps {
        container('java-node') {
          script {
            // Authentication with https://sonarqube.demo.opsta.co.th
            withSonarQubeEnv('sonarqube-opsta') {
              // Run Sonar Scanner
              sh '''${SCANNER_HOME}/bin/sonar-scanner \
              -D sonar.projectKey=${PROJECT_KEY} \
              -D sonar.projectName=${PROJECT_NAME} \
              -D sonar.projectVersion=${BRANCH_NAME}-${BUILD_NUMBER} \
              -D sonar.sources=./src
              '''
            } // End withSonarQubeEnv
            // Run Quality Gate
            timeout(time: 1, unit: 'MINUTES') { // Just in case something goes wrong, pipeline will be killed after a timeout
              def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
              if (qg.status != 'OK') {
                error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
            } // End timeout
          } // End script
        } // End container
      } // End steps
    } // End stage



    // ***** Stage Build *****
    stage('Build details Docker Image and push') {
      steps {
        container('docker') {
          script {
            // Do docker login authentication
            docker.withRegistry('https://registry.demo.opsta.co.th', 'registry-bookinfo') {
              // Do docker build and docker push
              docker.build("registry.demo.opsta.co.th/training10/bookinfo/details:${ENV_NAME}").push()
            } // End docker.withRegistry
          } // End script
        } // End container
      } // End steps
    } // End stage

    // ***** Stage Deploy *****
    stage('Deploy details with Helm Chart') {
      steps {
        // Run on Helm container
        container('helm') {
          script {
            // Use kubeconfig from Jenkins Credential
            withKubeConfig([credentialsId: 'gce-k8s-kubeconfig']) {
              // Run Helm upgrade
              sh "helm upgrade -f k8s/helm-values/values-bookinfo-${ENV_NAME}-details.yaml --wait \
                --set extraEnv.COMMIT_ID=${scmVars.GIT_COMMIT} \
                --namespace training10-bookinfo-${ENV_NAME} bookinfo-${ENV_NAME}-details k8s/helm"
            } // End withKubeConfig
          } // End script
        } // End container
      } // End steps
    } // End stage

    stage('Acceptance Test') {
      steps {
          script{
              sh "curl https://bookinfo.${ENV_NAME}.opsta.co.th/training10/details/health"
              sh "curl https://bookinfo.${ENV_NAME}.opsta.co.th/training10/details/details/1"
          }
      }
    }

  } // End stages
} // End pipeline
