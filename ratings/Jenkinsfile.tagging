pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: docker
    image: docker:19.03.13-dind
    command:
    - dockerd
    - --host=unix:///var/run/docker.sock
    - --host=tcp://0.0.0.0:2375
    - --storage-driver=overlay2
    tty: true
    securityContext:
      privileged: true
  - name: git
    image: alpine/git:v2.26.2
    command:
    - cat
    tty: true
"""
    }
  }

  stages {

    // ***** Stage Clone *****
    stage('Clone ratings source code') {
      steps {
        container('jnlp') {
          script {
            git branch: "master",
                credentialsId: 'training10-bookinfo-git-deploy-key',
                url: 'git@git.demo.opsta.co.th:adb/training10/ratings.git'
          }
        }
      }
    }

    // ***** Stage Docker Tag *****
    stage('Tag Docker Image') {
      steps {
        container('docker') {
          script {
            docker.withRegistry('https://registry.demo.opsta.co.th', 'registry-bookinfo') {
              // Pulling UAT Image
              uatImage = docker.image("registry.demo.opsta.co.th/training10/bookinfo/ratings:uat")
              uatImage.pull()
              // Push UAT Image back with build tag
              uatImage.push("build-${BUILD_NUMBER}")
            }
          }
        }
      }
    }

    // ***** Stage Git Tag *****
    stage('Git tag') {
      steps {
        container('git') {
          script {
            // Use deploy key as private key to push code
            sshagent(credentials: ['training10-bookinfo-git-deploy-key']) {
              sh """
                # Git tag first
                git tag build-${BUILD_NUMBER}
                # Push tag back to GitLab
                SSH_AUTH_SOCK=${SSH_AUTH_SOCK} \
                  GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" \
                  git push --tags
              """
            }
          }
        }
      }
    }
  }
}
